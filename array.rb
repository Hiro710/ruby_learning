# 配列の生成_1
p a = [1, 2, 3]                  #=> [1, 2, 3]
p a.class                        #=> Array

# 配列の生成_2
p Array[1, 2, 3]                 #=> [1, 2, 3]

# 配列の生成_3
# Array.new(配列の長さ, 初期値)
p Array.new(3, "str")            #=> ["str", "str", "str"]

# 配列の生成_4
# 引数に配列を指定すると、その配列を複製する
p Array.new([1, 2, 3])           #=> [1, 2, 3]

# 配列の生成_5
# 引数に配列の長さとブロックを渡す
# ブロックには配列のインデックスが渡され、ブロックの評価結果を各要素の値として設定する
p Array.new(3) { |i| i * 3 }     #=> [0, 3, 6]

=begin
  配列に要素を追加する

  <<
  push
  concat
  insert
  +
  unshift

  <<とpushは、指定された引数にあるオブジェクトを自身の末尾に追加する
  concatは指定された配列を、自身の末尾に連結する
  insertは1番目の引数で指定された場所に、それ以降で指定されたオブジェクトを挿入する
  unshiftは指定されたオブジェクトを配列の先頭に追加する
  以上は破壊的メソッドで元のオブジェクトの内容を書き換える

  +は自身と引数で与えられた配列を連結した配列を新たに生成して返す
=end

a = [1, 2, 3]
p a << 4                  #=> [1, 2, 3, 4]
p a.concat [5, 6]         #=> [1, 2, 3, 4, 5, 6]
p a.insert(3, 7)          #=> [1, 2, 3, 7, 4, 5, 6]
p a.object_id             #=> 60
p b = a + [10]            #=> [1, 2, 3, 7, 4, 5, 6, 10]
p b.object_id             #=> 80
a = [1, 2, 3]
p a.unshift(10)           #=> [10, 1, 2, 3]
